{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PlayerService = /*#__PURE__*/(() => {\n  class PlayerService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n\n    setTeam(lineup) {\n      return forkJoin( // as of RxJS 6.5+ we can use a dictionary of sources\n      {\n        f1Stats: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.f1}/stats?stats=statsSingleSeason&season=20222023`),\n        f1Name: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.f1}/`),\n        f2Stats: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.f2}/stats?stats=statsSingleSeason&season=20222023`),\n        f2Name: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.f2}/`),\n        f3Stats: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.f3}/stats?stats=statsSingleSeason&season=20222023`),\n        f3Name: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.f3}/`),\n        d1Stats: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.d1}/stats?stats=statsSingleSeason&season=20222023`),\n        d1Name: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.d1}/`),\n        d2Stats: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.d2}/stats?stats=statsSingleSeason&season=20222023`),\n        d2Name: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.d2}/`),\n        gStats: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.g}/stats?stats=statsSingleSeason&season=20222023`),\n        gName: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/people/${lineup.g}/`),\n        coach: this.httpClient.get(`https://statsapi.web.nhl.com/api/v1/teams/${lineup.teamid}/?expand=team.stats`)\n      });\n    } //subscribe = this.setTeam(8481540).subscribe(val => console.log(val));\n\n\n    getTeam(id) {\n      return this.setTeam(id);\n    }\n\n    getPoints() {// return this.httpClient.get(this.points);\n    }\n\n  }\n\n  PlayerService.ɵfac = function PlayerService_Factory(t) {\n    return new (t || PlayerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PlayerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlayerService,\n    factory: PlayerService.ɵfac,\n    providedIn: 'root'\n  });\n  return PlayerService;\n})();","map":null,"metadata":{},"sourceType":"module"}